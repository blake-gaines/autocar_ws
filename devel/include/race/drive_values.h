// Generated by gencpp from file race/drive_values.msg
// DO NOT EDIT!


#ifndef RACE_MESSAGE_DRIVE_VALUES_H
#define RACE_MESSAGE_DRIVE_VALUES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace race
{
template <class ContainerAllocator>
struct drive_values_
{
  typedef drive_values_<ContainerAllocator> Type;

  drive_values_()
    : pid_vel(0.0)
    , pid_error(0.0)
    , z(0.0)
    , a(0.0)
    , b(0.0)
    , dist_CD(0.0)
    , dist_AB(0.0)
    , alpha(0.0)
    , realvel(0.0)
    , theta1(0.0)
    , theta2(0.0)  {
    }
  drive_values_(const ContainerAllocator& _alloc)
    : pid_vel(0.0)
    , pid_error(0.0)
    , z(0.0)
    , a(0.0)
    , b(0.0)
    , dist_CD(0.0)
    , dist_AB(0.0)
    , alpha(0.0)
    , realvel(0.0)
    , theta1(0.0)
    , theta2(0.0)  {
  (void)_alloc;
    }



   typedef float _pid_vel_type;
  _pid_vel_type pid_vel;

   typedef float _pid_error_type;
  _pid_error_type pid_error;

   typedef float _z_type;
  _z_type z;

   typedef float _a_type;
  _a_type a;

   typedef float _b_type;
  _b_type b;

   typedef float _dist_CD_type;
  _dist_CD_type dist_CD;

   typedef float _dist_AB_type;
  _dist_AB_type dist_AB;

   typedef float _alpha_type;
  _alpha_type alpha;

   typedef float _realvel_type;
  _realvel_type realvel;

   typedef float _theta1_type;
  _theta1_type theta1;

   typedef float _theta2_type;
  _theta2_type theta2;





  typedef boost::shared_ptr< ::race::drive_values_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::race::drive_values_<ContainerAllocator> const> ConstPtr;

}; // struct drive_values_

typedef ::race::drive_values_<std::allocator<void> > drive_values;

typedef boost::shared_ptr< ::race::drive_values > drive_valuesPtr;
typedef boost::shared_ptr< ::race::drive_values const> drive_valuesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::race::drive_values_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::race::drive_values_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::race::drive_values_<ContainerAllocator1> & lhs, const ::race::drive_values_<ContainerAllocator2> & rhs)
{
  return lhs.pid_vel == rhs.pid_vel &&
    lhs.pid_error == rhs.pid_error &&
    lhs.z == rhs.z &&
    lhs.a == rhs.a &&
    lhs.b == rhs.b &&
    lhs.dist_CD == rhs.dist_CD &&
    lhs.dist_AB == rhs.dist_AB &&
    lhs.alpha == rhs.alpha &&
    lhs.realvel == rhs.realvel &&
    lhs.theta1 == rhs.theta1 &&
    lhs.theta2 == rhs.theta2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::race::drive_values_<ContainerAllocator1> & lhs, const ::race::drive_values_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace race

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::race::drive_values_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::race::drive_values_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::race::drive_values_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::race::drive_values_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::race::drive_values_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::race::drive_values_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::race::drive_values_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3201a025913db3e51dc81dc52587e75";
  }

  static const char* value(const ::race::drive_values_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3201a025913db3eULL;
  static const uint64_t static_value2 = 0x51dc81dc52587e75ULL;
};

template<class ContainerAllocator>
struct DataType< ::race::drive_values_<ContainerAllocator> >
{
  static const char* value()
  {
    return "race/drive_values";
  }

  static const char* value(const ::race::drive_values_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::race::drive_values_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pid_vel\n"
"float32 pid_error\n"
"float32 z\n"
"float32 a\n"
"float32 b\n"
"float32 dist_CD\n"
"float32 dist_AB\n"
"float32 alpha\n"
"float32 realvel\n"
"float32 theta1\n"
"float32 theta2\n"
;
  }

  static const char* value(const ::race::drive_values_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::race::drive_values_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pid_vel);
      stream.next(m.pid_error);
      stream.next(m.z);
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.dist_CD);
      stream.next(m.dist_AB);
      stream.next(m.alpha);
      stream.next(m.realvel);
      stream.next(m.theta1);
      stream.next(m.theta2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct drive_values_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::race::drive_values_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::race::drive_values_<ContainerAllocator>& v)
  {
    s << indent << "pid_vel: ";
    Printer<float>::stream(s, indent + "  ", v.pid_vel);
    s << indent << "pid_error: ";
    Printer<float>::stream(s, indent + "  ", v.pid_error);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "a: ";
    Printer<float>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<float>::stream(s, indent + "  ", v.b);
    s << indent << "dist_CD: ";
    Printer<float>::stream(s, indent + "  ", v.dist_CD);
    s << indent << "dist_AB: ";
    Printer<float>::stream(s, indent + "  ", v.dist_AB);
    s << indent << "alpha: ";
    Printer<float>::stream(s, indent + "  ", v.alpha);
    s << indent << "realvel: ";
    Printer<float>::stream(s, indent + "  ", v.realvel);
    s << indent << "theta1: ";
    Printer<float>::stream(s, indent + "  ", v.theta1);
    s << indent << "theta2: ";
    Printer<float>::stream(s, indent + "  ", v.theta2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RACE_MESSAGE_DRIVE_VALUES_H
